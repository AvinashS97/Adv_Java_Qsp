// 04 October

		// Collection Framework
Collection Framework is a group of many interface and classes which works together to store a group of elements and perform CRUD operation efficiently.
Collection Framework is available in java.util package we have to import java.util.*; package to use the collection framework interfaces and classes.

		Difference between Array and Collection Framework:- 
Array:- In array we can store only similar type of elements.
		Array is fixed in size.
		Array is not good in memory management.
		Array does not have any inbuilt methods so code complexity increases in array.
		In array we can store primitive or Non-Primitive data.
		Array provides faster performance.

Collection:- In Collection Framework we can store heterogeneous type of elements.
			 Collection Framework is dynamic which can grow or shrink as per requirement.
			 Collection framework is best for memory management.
			 In Collection Framework it provides large amount of inbuilt features by which code become simple and more readable.
			 In Collection Framework only Non-Primitive data or object type is allowed to store.
			 Collection Framework is slower in performance than Array.
			 

	To overcome above mentioned________ of Array java provide collection framework with two different hierarchy.
	i) Collection Hierarchy
	ii) Map Hierarchy
	
	i) Collection Hierarchy:- Collection Hierarchy is available in java.util package. It contains various interface and classes which are used to store a group of objects and perform CRUD operation.
	The top most interface in collection Hierarchy is Iterable and it is extended by collection interface.
	Collection interface has three child interface- list, set, queue
	
	
	
	Collection Interface:- Collection is an interface. Collection in java.util.package. Which is used to store a group of object and perform operation efficiently.
	
	Creation of Collection:-
	We can create object of any class on collection reference so that a collection will be created where we can store a group of objects.
	
	Example:- Collection c1 = new Arraylist();
			  Collection c2 = new Linkedlist();
			  Collection c3 = new Hashlist();
			  Collection c4 = new Treeset();
	
	# Method of Collection:-
	
	1) To add:-
	a) add (object o):- By this method we can add one object into collection.
	
	b) addAll(collection c):- By this method we can add a group of objects into collection.
	
	Note:- If elements are add then it will return true otherwise it will return false.
	
	2) To remove:-
	a) remove(object):- This method will remove the first occurrence of the given object if the element  is found. If element is not found then element will not remove and false will be return.
	
	b)removeAll(Collection c):- By this method all the elements of given collection will be removed.
	Example:- 
	c1-> 12 15 18 12 18 20 12 17 12 15
	c2-> 12 15 18
	
	c1.removeAll(c2)
	SOP(c1); // 20 17
	
	c1.retainAll(c2)
	SOP(c1); // 12 15 18 12 18 12 12 15	
	
	c) retainAll(Collection c):- By this method all elements of given collection will be retained other types of elements will be removed from collection.
	
	d) clear():- By this method all  the elements of a collection will be removed.
	Example:- c1-> 12 15 18 20 25
				c1.clear();
				SOP(c1); // []
				
	3) To Search:-
	a) contains(object):- By this method we can return whether a given element is available in collection or not it will return true if it is available or it will return false.
	
	b) ContainsAll(Collection c):- By this we can check whether a group of elements are available in collection or not.
	Example:- c1-> 12 15 18 25 30 12
	c2-> 12 15 18
	SOP(c1.containsAll(c2)); // True
	
	4) Other Methods:-
	a) size():- By this method we can get the size of collection.
	b) isEmpty():- By this method we can check whether the collection is empty or not.
	c) hashCode():- This method give hash Code value of the collection.
	d) toArray():- By this method we can convert the elements of collection into array.
	
	Example:- c1-> 12 18.5 15 12 18
	object[] x = c1.toArray();
	
	
	